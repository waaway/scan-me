'use client';
import React, { useState, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import styles from '../../styles/Picture.module.css';
import { IoIosArrowRoundBack } from "react-icons/io";
import Cropper from 'react-easy-crop';
import getCroppedImg from './cropImage';
import { TbHandClick } from "react-icons/tb";
import { FaInstagram } from "react-icons/fa";


const timeOptions = [
  { time: 40, price: 49 },
  { time: 60, price: 69 },
  { time: 80, price: 99 },
];

const captions = [
  '‡πÇ‡∏™‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ã‡πà‡∏ö ‡∏°‡∏≤‡∏à‡∏µ‡∏ö‡πÑ‡∏î‡πâ ‡∏î‡∏∑‡πà‡∏°‡πÄ‡∏Å‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢!',
  '‡∏≠‡∏¢‡πà‡∏≤‡∏°‡∏≠‡∏á‡∏ô‡∏≤‡∏ô ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏´‡∏•‡∏á‡∏£‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ï‡∏±‡∏ß',
  '‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏™‡∏Ç‡∏° ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏£‡∏™‡∏´‡∏ß‡∏≤‡∏ô',
  '‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏ï‡πà‡∏ô‡∏±‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏±‡∏ô‡∏™‡πå‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô',
  '‡∏≠‡∏¢‡πà‡∏≤‡∏°‡∏≠‡∏á‡∏ô‡∏≤‡∏ô ‡πÄ‡∏î‡∏µ‡πã‡∏¢‡∏ß‡∏´‡∏•‡∏á‡∏£‡∏±‡∏Å‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏ï‡∏±‡∏ß',
  '‡πÄ‡∏´‡∏•‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏™‡∏Ç‡∏° ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏£‡∏™‡∏´‡∏ß‡∏≤‡∏ô',
  '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏à‡πâ‡∏≤‡∏ä‡∏π‡πâ ‡πÅ‡∏Ñ‡πà‡∏î‡∏π‡πÄ‡∏ü‡∏£‡∏ô‡∏î‡πå‡∏•‡∏µ‡πà‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏°‡∏≤',
  '‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏à‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏ß‡∏î‡πÄ‡∏•‡∏¢‡∏•‡πà‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏ô‡∏µ‡πâ',
  '‡∏Ñ‡∏ô‡∏î‡∏µ‡πÜ ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏´‡∏•‡πâ‡∏≤...‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥!',
  '‡πÇ‡∏ï‡πä‡∏∞‡∏Ç‡πâ‡∏≤‡∏á‡πÜ ‡∏ß‡πà‡∏≤‡∏á‡∏ô‡∏∞ ‡πÅ‡∏ï‡πà‡∏ß‡πà‡∏≤‡πÉ‡∏à‡πÄ‡∏£‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏ß‡πà‡∏≤',
  '‡∏°‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡πà‡∏≤‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÑ‡∏´‡∏ô‡∏ô‡∏∞',
  '‡∏ñ‡πâ‡∏≤‡πÄ‡∏ò‡∏≠‡∏Å‡∏•‡πâ‡∏≤ ‡πÄ‡∏£‡∏≤‡∏Å‡πá‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ä‡∏ô‡πÅ‡∏Å‡πâ‡∏ß',
  '‡∏î‡∏∑‡πà‡∏°‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏á ‡πÅ‡∏ï‡πà‡∏£‡∏±‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏ô‡∏∞‡∏ö‡∏≠‡∏Å‡πÄ‡∏•‡∏¢',
  '‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏¢‡πá‡∏ô‡πÜ ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏•‡πà‡πÄ‡∏ò‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏ö‡∏≠‡∏∏‡πà‡∏ô',
  '‡∏™‡πÄ‡∏õ‡∏Ñ‡πÑ‡∏°‡πà‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô',
  '‡∏°‡∏≠‡∏á‡∏ï‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤ ‚Äú‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‚Äù ‡∏´‡∏£‡∏∑‡∏≠ ‚Äú‡∏à‡∏≠‡∏á‡πÉ‡∏à‚Äù',
  '‡∏Ñ‡∏∑‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏°‡∏≤ ‡πÅ‡∏ï‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡∏°‡∏µ‡∏Ñ‡∏ô‡∏Ñ‡∏∏‡∏¢',
  '‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ñ‡∏ô‡∏Ñ‡∏∏‡∏°‡∏£‡πâ‡∏≤‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ô‡∏Ñ‡∏∏‡∏°‡πÉ‡∏à‡∏î‡∏µ‡∏•‡πà‡∏∞?',
  '‡∏™‡∏±‡πà‡∏á‡πÄ‡∏´‡∏•‡πâ‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ö‡∏≤‡∏£‡πå ‡πÅ‡∏ï‡πà‡∏™‡∏±‡πà‡∏á‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡πÄ‡∏£‡∏≤',
  '‡∏ï‡∏≤‡∏°‡∏°‡∏≤ Follow IG ‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà',
  '‡∏™‡πà‡∏≠‡∏á IG ‡πÄ‡∏£‡∏≤‡∏™‡∏¥ ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡πÉ‡∏à üòâ',
  '‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô? Follow IG ‡πÄ‡∏•‡∏¢',
  'IG ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏ô‡∏∏‡∏Å!',
  '‡∏™‡∏≤‡∏¢‡∏õ‡∏≤‡∏£‡πå‡∏ï‡∏µ‡πâ ‡πÅ‡∏ß‡∏∞‡∏°‡∏≤‡∏™‡πà‡∏≠‡∏á IG ‡πÄ‡∏£‡∏≤‡∏´‡∏ô‡πà‡∏≠‡∏¢',
  '‡πÄ‡∏õ‡∏¥‡∏î‡∏ß‡∏≤‡∏£‡πå‡∏õ‡∏°‡∏≤‡∏ó‡∏µ‡πà',
  'My IG - Follow for good vibes!',
  '‡∏Ñ‡∏∑‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏Ñ‡∏£‡πÇ‡∏™‡∏î ‡∏ä‡∏ô‡πÅ‡∏Å‡πâ‡∏ß! ü•Ç',
  '‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏ô‡∏∞ ‡πÑ‡∏°‡πà‡∏Å‡∏±‡∏î! üòä',
  '‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ä‡∏ô‡πÅ‡∏Å‡πâ‡∏ß/‡∏Ñ‡∏∏‡∏¢‡πÄ‡∏•‡πà‡∏ô',
  '‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏á...‡∏£‡∏≠‡∏Ñ‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÜ ‡∏°‡∏≤ Follow',
  '‡∏°‡∏≠‡∏á‡∏à‡∏≠‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏¥‡πâ‡∏°‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢‡∏™‡∏¥ üòâ',
  '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û (‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏ß‡∏Å!',
  '‡∏Ñ‡∏ô‡∏ô‡πà‡∏≤‡∏£‡∏±‡∏Å‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠‡∏ô‡∏µ‡πâ',
  '‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠‡∏™‡∏±‡∏Å‡∏´‡∏ô‡πà‡∏≠‡∏¢ ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ô‡πÅ‡∏≠‡∏ö‡∏õ‡∏¥‡πä‡∏á!',
  '‡∏ä‡∏ô‡πÅ‡∏Å‡πâ‡∏ß‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏Å‡∏±‡∏ô',
  '‡πÅ‡∏ß‡∏∞‡∏°‡∏≤‡∏ó‡∏±‡∏Å‡∏ó‡∏≤‡∏¢‡∏ä‡∏≤‡∏ß‡πÅ‡∏Å‡πä‡∏á‡∏Ñ‡πå‡∏´‡∏ô‡πà‡∏≠‡∏¢'
];

export default function PicturePage() {
  const router = useRouter();
  const [selectedFile, setSelectedFile] = useState(null);
  const [imageSrc, setImageSrc] = useState(null);
  const [previewUrl, setPreviewUrl] = useState(null);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState(null);
  const [croppedImage, setCroppedImage] = useState(null);
  const [crop, setCrop] = useState({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [selectedTime, setSelectedTime] = useState(null);
  const [selectedCaption, setSelectedCaption] = useState('');
  const [igName, setIgName] = useState('');


  const handleFileChange = async (e) => {
    const file = e.target.files[0];
    if (!file || !file.type.startsWith('image/')) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û');
      return;
    }
    setSelectedFile(file);
    const reader = new FileReader();
    reader.onloadend = () => {
      setImageSrc(reader.result);
      setPreviewUrl(null);
      setCroppedImage(null);
    };
    reader.readAsDataURL(file);
  };

  const onCropComplete = useCallback((_, croppedPixels) => {
    setCroppedAreaPixels(croppedPixels);
  }, []);

  const showCroppedImage = useCallback(async () => {
    try {
      const cropped = await getCroppedImg(imageSrc, croppedAreaPixels);
      setCroppedImage(cropped);
      setPreviewUrl(cropped);
      setImageSrc(null);
    } catch (e) {
      console.error(e);
    }
  }, [imageSrc, croppedAreaPixels]);

  const handlePayment = () => {
    if (!croppedImage) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }
    if (selectedTime === null) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ');
      return;
    }
    if (!selectedCaption) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ñ‡∏õ‡∏ä‡∏±‡πà‡∏ô');
      return;
    }
    if (!selectedFile) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô');
    return;
  }
  if (!igName.trim()) {
    alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠ Instagram');
    return;
  }

    router.push('/PaymentPicture');
  };

  return (
    <div className={styles.container} style={{ overflow: 'hidden' }}>
      {!imageSrc && (
        <>
          <button onClick={() => router.push('/')} className={styles.backButton}>
            <IoIosArrowRoundBack />
          </button>
          <h1 className={styles.title}>‡∏™‡πà‡∏á‡∏£‡∏π‡∏õ‡∏Ç‡∏∂‡πâ‡∏ô‡∏à‡∏≠</h1>

          <div className={styles.timeOptions}>
            {timeOptions.map((opt) => (
              <button
                key={opt.time}
                className={`${styles.timeButton} ${selectedTime === opt.time ? styles.active : ''}`}
                onClick={() => setSelectedTime(opt.time)}
              >
                <span className={styles.time}>{opt.time} ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ</span>
                <span className={styles.price}>{opt.price}‡∏ø</span>
              </button>
            ))}
          </div>

          {!previewUrl && (
            <div className={styles.uploadBox}>
              <label htmlFor="uploadInput">
                <div className={styles.placeholder}>
                  <TbHandClick/>
                  <p>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</p>
                </div>
              </label>
              <input
                id="uploadInput"
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                style={{ display: 'none' }}
              />
            </div>
          )}

          {previewUrl && (
            <div className={styles.uploadBox}>
              <label htmlFor="uploadInput">
                <img src={previewUrl} alt="preview" className={styles.previewImg} />
              </label>
              <input 
                id="uploadInput"
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                style={{ display: 'none' }}
              />
            </div>
          )}

          <div className={styles.igWrapper}>
            <FaInstagram className={styles.igIcon} />
            <input
              type="text"
              placeholder="Instagram"
              className={styles.igInput}
              value={igName}
              onChange={(e) => setIgName(e.target.value)}
            />
          </div>



          <select 
            value={selectedCaption}
            onChange={(e) => setSelectedCaption(e.target.value)}
            className={styles.captionSelect}
          >
            <option value="" disabled hidden>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°</option>
            {captions.map((cap, idx) => (
              <option key={idx} value={cap}>{cap}</option>
            ))}
          </select>

          <button className={styles.paymentButton} onClick={handlePayment}>
            ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
          </button>
        </>
      )}

      {imageSrc && (
        <div className={styles.cropSection}>
          <div className={styles.cropWrapper}>
            <Cropper
              image={imageSrc}
              crop={crop}
              zoom={zoom}
              aspect={9 / 16}
              onCropChange={setCrop}
              onZoomChange={setZoom}
              onCropComplete={onCropComplete}
            />
          </div>
          <button onClick={showCroppedImage} className={styles.paymentButton}>
            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
          </button>
        </div>
      )}
    </div>
  );
}
